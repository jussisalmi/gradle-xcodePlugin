/*

If you what to create a build for the device than you have to specify for sign sign settings.

e.g for a adHoc build:

Create a gradle.properties and add the following values:

Example.AdHoc.SigningCertificateURI=http://.../Development.p12  // file:// urls also works here
Example.AdHoc.SigningCertificatePassword=mySecrect
Example.AdHoc.SigningMobileProvisionURI=http://.../Example.mobileprovision
Example.AdHoc.SigningMobileProvisionURIWatchkit=http://.../ExampleWatchkit.mobileprovision
Example.AdHoc.SigningMobileProvisionURIWatchKitExtension=http://.../ExampleWatchKitExtension.mobileprovision
Example.AdHoc.SigningMobileProvisionURIWidget=http://.../ExampleWidget.mobileprovision

Then run: 'gradle package/Example/AdHoc


*/

buildscript {
	repositories {
		maven {
			url('http://repository.openbakery.org')
			allowInsecureProtocol = true
			//url('file:///Users/rene/workspace/openbakery/xcodePlugin/repository')
		}
		mavenCentral()
  }

	dependencies {
	    classpath "org.openbakery:xcode-plugin:0.23.+"
	}
}

apply plugin: 'org.openbakery.xcode-plugin'


xcodebuild {
	//version = "6.2"  // uncomment this if you want to use xcode 6.1, but another xcode is the default on your machine
	//version = "8.2"

	target = 'Example'
	scheme = 'Example'
	configuration = 'Test'
	destination = ['iPad Pro (11-inch)', 'iPhone 8' ]
}

infoplist {
	// override the bundle identifier that was specified in the xcode project.
	bundleIdentifier= 'org.openbakery.gxp.Example'
}

coverage {
	outputFormat = 'html'
	exclude = '.*h$|.*UnitTests.*m$'
}

task adhoc(dependsOn:'package/Example/AdHoc', description: 'Creates an adhoc device build') {
}


task appstore(dependsOn:'package/Example/Appstore', description: 'Creates an appstore device build') {
}


def configureDescription = 'Configures the build according to the passed <ConfigurationName>'
def archiveDescription = 'Configures the project using "configure<ConfigurationName>" and saves an Xcode archive'
def packageDescription = 'Packages and codesignes the project after executing "archive<ConfigurationName" and saves the resulting ipa'

def getPropertyForComponents(List<String> components) {
  def propertyName = components.join('.')

	if (project.hasProperty(propertyName+"_0")) {
		// is array
		def result = []
		def counter = 0
		while(project.hasProperty(propertyName+"_"+counter)) {
			result << project.property(propertyName+"_"+counter)

			counter++
		}
		return result
	}


  if (!project.hasProperty(propertyName)) {
		logger.warn("No property defined with name " + propertyName)
	}
  return project.hasProperty(propertyName) ? project.property(propertyName) : ""
}



def printBundleIdentifier(File infoPlist) {
	PlistHelper plistHelper = new PlistHelper(new CommandRunner())
	println "BundleIdentifier in " + infoPlist + ": " + plistHelper.getValueFromPlist(infoPlist, "CFBundleIdentifier")
}


import org.openbakery.util.PlistHelper
import org.openbakery.CommandRunner

task updateInfoPlist() {
	doLast {
		PlistHelper plistHelper = new PlistHelper(new CommandRunner())
		File infoPlist = new File('Example/Example-Info.plist')
		def version = ""
		def shortVersionString = ""
		if (project.hasProperty("infoplist.version")) {
			version = infoplist.version
		} else {
			version = plistHelper.getValueFromPlist(infoPlist, "CFBundleVersion")
		}
		if (project.hasProperty("infoplist.shortVersionString")) {
			shortVersionString = infoplist.shortVersionString
		} else {
			shortVersionString = plistHelper.getValueFromPlist(infoPlist, "CFBundleShortVersionString")
		}

		println "Version: " + version
		println "ShortVersionString: " + shortVersionString

		File infoPlistTodayWidget = new File('ExampleTodayWidget/Info.plist')
		plistHelper.setValueForPlist(infoPlistTodayWidget, "CFBundleIdentifier", infoplist.bundleIdentifier + ".Widget")
		plistHelper.setValueForPlist(infoPlistTodayWidget, "CFBundleShortVersionString", shortVersionString)
		plistHelper.setValueForPlist(infoPlistTodayWidget, "CFBundleVersion", version)

		File infoPlistWatchkit = new File('Example WatchKit App/Info.plist')
		plistHelper.setValueForPlist(infoPlistWatchkit, "CFBundleIdentifier", infoplist.bundleIdentifier + ".watchkitapp")
		plistHelper.setValueForPlist(infoPlistWatchkit, "CFBundleShortVersionString", shortVersionString)
		plistHelper.setValueForPlist(infoPlistWatchkit, "CFBundleVersion", version)
		plistHelper.setValueForPlist(infoPlistWatchkit, "WKCompanionAppBundleIdentifier", infoplist.bundleIdentifier)


		File infoPlistWatchkitExtenstion = new File('Example WatchKit Extension/Info.plist')
		plistHelper.setValueForPlist(infoPlistWatchkitExtenstion, "CFBundleIdentifier", infoplist.bundleIdentifier + ".watchkitapp.watchkitextension")
		plistHelper.setValueForPlist(infoPlistWatchkitExtenstion, "CFBundleShortVersionString", shortVersionString)
		plistHelper.setValueForPlist(infoPlistWatchkitExtenstion, "CFBundleVersion", version)
		plistHelper.setValueForPlist(infoPlistWatchkitExtenstion, "NSExtension:NSExtensionAttributes:WKAppBundleIdentifier", infoplist.bundleIdentifier + ".watchkitapp")


		printBundleIdentifier(infoPlist)
		printBundleIdentifier(infoPlistTodayWidget)
		printBundleIdentifier(infoPlistWatchkit)
		printBundleIdentifier(infoPlistWatchkitExtenstion)
	}
}



tasks.addRule("Pattern: configure/<TargetName>: " + configureDescription) { String taskName ->
	if (taskName.startsWith("configure")) {
		task(taskName, dependsOn:['clean']) {
      def configurationName = (taskName - 'configure/')
      xcodebuild {
				simulator = false
        configuration = 'Release'
        scheme = configurationName
        target = configurationName
      }
		}
		infoplistModify.dependsOn updateInfoPlist

    tasks[taskName].mustRunAfter(clean)
	}
}

tasks.addRule("Pattern: archive/<TargetName>: " + archiveDescription) { String taskName ->
  if (taskName.startsWith("archive")) {
    def configureTask = 'configure/' + (taskName - 'archive/')
    task(taskName, dependsOn:[configureTask, 'archive']).mustRunAfter(configureTask)
  }
}

tasks.addRule("Pattern: package/<TargetName>/<Properties>: " + packageDescription) { String taskName ->
  if (taskName.startsWith("package")) {

		def tokens = taskName.split('/')
		if (tokens.length != 3) {
			throw new IllegalArgumentException("Wrong number of parameters: package/<TargetName>/<Properties>")
		}

    def targetName = tokens[1]
    def properties = tokens[2]
    def archiveTask = 'archive/' + targetName
    task(taskName, dependsOn:[archiveTask, 'package']) {
      project.xcodebuild {
  			simulator = false
  			signing {
  				certificateURI = getPropertyForComponents([targetName, properties, 'SigningCertificateURI'])
  				certificatePassword = getPropertyForComponents([targetName, properties, 'SigningCertificatePassword'])
  				mobileProvisionURI = [
						getPropertyForComponents([targetName, properties, 'SigningMobileProvisionURI']),
						getPropertyForComponents([targetName, properties, 'SigningMobileProvisionURIWatchkit']),
						getPropertyForComponents([targetName, properties, 'SigningMobileProvisionURIWatchKitExtension']),
						getPropertyForComponents([targetName, properties, 'SigningMobileProvisionURIWidget'])
					]
  			}
  		}
    }
    tasks[taskName].mustRunAfter(archiveTask)
  }
}



gradle.taskGraph.whenReady { taskGraph ->

	// ------------------------------------------------------------------------------------------

	if (taskGraph.hasTask(tasks.appcenter)) {
		println ("using api token: " + appCenterApiToken)
		appcenter {
			apiToken = appCenterApiToken
			appOwner = 'app-center-app-owner'
			appName = 'app-center-app-name'
			destination = ["Collaborators", "QA Testers"]
			releaseNotes = "Release notes."
			notifyTesters = true
			mandatoryUpdate = false
		}
	}

	if (taskGraph.hasTask(tasks.deploygate)) {
		println ("using api token: " + deploygateApiToken)
		deploygate {
			apiToken = deploygateApiToken
			userName = deploygateUserName
		}
	}

	if (taskGraph.hasTask(appstoreValidate) || taskGraph.hasTask(appstoreUpload)) {

		if (appstore.username == null) {
			def username = System.console().readLine("\nPlease enter your Apple-ID that you use for iTunesConnect: ")
			appstore.username = new String(username)
		}

		if (appstore.password == null) {
			def password = System.console().readPassword("\nPlease enter the password for <" + appstore.username + ">: ")
			appstore.password = new String(password)
		}

	}
}


